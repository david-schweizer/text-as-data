---
title: "Version control (Github)"
subtitle: "Week 9"
author: "David Schweizer"
date: "April 09, 2024"
date-format: long
institute: "University of Mannheim"
format: 
  revealjs:
    theme: simple
    slide-number: c/t #< collapsed/total
    footer: "Automated Data Collection | Spring 2024 | University of Mannheim"
editor: visual
---

## Plan for today

Reproducible research with Git and GitHub:

-   advantages of version control

-   features of GitHub and GitHub Desktop & terms and concepts

-   general workflow:

    -   creating a repository,

    -   committing changes,

    -   pushing changes

-   intro to branches and pull requests

## Next steps

Today, we cannot cover:

-   using the [console/command line to interact with Git](https://docs.gitlab.com/ee/gitlab-basics/start-using-git.html)

-   dealing with [merge conflicts after pull requests](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/addressing-merge-conflicts/resolving-a-merge-conflict-on-github)

-   software/package development

-   creating your own [website with Quarto and GitHub](https://ucsb-meds.github.io/creating-quarto-websites/)

## Version control in the research workflow

[![](paper.jpg)](https://www.tandfonline.com/doi/full/10.1080/00031305.2017.1399928)

## Why should we use version control?

-   Good academic work entails organisation, and the recording and disseminating of it

-   Collaboration is much more structured and transparent with version control in place

-   Git and GitHub can be used for many things:

    -   project management, saving code and outputs

    -   hosting a personal or professional website

-   Rewarding: You can trace your work and accomplishments

## Git

-   Git is a version control system. Original purpose: help groups of developers work collaboratively on big software projects

-    Git manages the evolution of a set of files (called a repository or repo) in a highly structured way

-   Think of it as the “Track Changes” feature from Microsoft Word, but more rigorous, powerful, and scaled up to multiple files

-   Resources: [Overview of basic Git commands](https://happygitwithr.com/git-commands.html) & Book on Git: [Chacon and Straub (2014)](https://git-scm.com/book/en/v2)

## Github

-   GitHub complements Git by providing a polished user interface and distribution mechanism for Git repositories

    -   Git: software you will use locally to record changes to a set of files

    -   GitHub: a hosting service for such projects.

-   Many operations can be done entirely in the browser

-   GitHub also offers granular control over who can see, edit, and administer a project

-   You can apply for a free [GitHub Pro account for students](https://education.github.com/pack/join)!

## Username. Who cares?

-   Incorporate your actual name in your username!

-   Reuse your username from other contexts, e.g., Twitter ("professional" social media)

-   Pick a (short) username you will be comfortable revealing in applications.

-   Don’t highlight your current university, employer, or place of residence

-   [More info & tips](https://happygitwithr.com/github-acct.html)

## How you could build your profile

![](mueller.jpg)

# Terms and concepts 

## Terms (1)

-   **Repository/Repo:** directory of files that Git manages holistically

```{=html}
<!-- -->
```
-   **Commit:** a snapshot of all the files in the repo, at a specific moment. Under the hood, that is not exactly how Git implements things

-   **Commit message:** every time you make a commit you must also write a short commit message

## Terms (2)

-   **Pull request:** submitting contributions to a project

-   **Branch:** diverge from the main line of development and continue to do work without messing up this main line.

-   For more information see: <https://git-scm.com/doc>

## GitHub workflow

![](workflow.jpg)

## Setup: How to get started

1.  Register for a free account with [GitHub](https://github.com)
2.  [Install Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git). Depending on your OS, Git might already be installed. Usually, you will need to install it or update it to a more recent version
3.  Install a local Git client (e.g., SourceTree, GitKraken, GitHub Desktop). A Git client provides a graphical user interface for Git, which is otherwise command-line only[. We will use GitHub Desktop.](https://desktop.github.com)

**→ Once this setup is done, you are ready to start using Git and GitHub**

## How to structure your project?

-   Have a local folder for all of your projects that you want to host on GitHub

-   For example:

    -   GitHub

        -   bachelor-thesis

        -   seminar_x

        -   seminar_y

-   You can set up new repositories at github.com or via GitHub Desktop

## GitHub desktop: Add a new repository

![](git_desk.jpg)

## What should we commit?

**Source files:** These files are created and edited by hand, such as R or Python scripts, R Markdown or LaTeX files. This could also include the raw data for an analysis.

**Configuration files:** These files modify the behavior of a tool, for example .gitignore (identify files or file formats that should not be committed)

**Derived products:** These files are programmatically generated from source files and have external value. By executing .R or rendering .Rmd files, you obtain artifacts such as intermediate data (e.g., .csv or .rds), figures (e.g., .png or .pdf), and reports (e.g., .md, .pdf, .docx, or .html)

## What not to commit?

-   **Rule of thumb**: a file (e.g., intermediate data) that is large and changing often can make your repository bloated and slow down pushes and pulls (speaking from experience!)

-   You can exclude files from commits by adding it to the *.gitignore file*

## .gitignore

![](gitignore.jpg)

## How to commit changes

Let's start by creating a new R script:

```{r, echo = TRUE}
library(tidyverse)
library(gapminder)

gapminder %>% 
  filter(year == 2007) %>% 
ggplot(aes(x = gdpPercap,
           y = lifeExp)) +
  geom_point()
```

## Github Desktop

![](github_desktop.jpg)

## Github Desktop

![](github_desktop_1.jpg)

## Github Desktop

![](github_desktop_2.jpg)

## Github Desktop

![](github_desktop_3.jpg)

## Github Desktop

![](github_desktop_4.jpg)

## Add more to our R script

```{r, eval=FALSE}
library(tidyverse)
library(gapminder)

gapminder %>% 
  filter(year == 2007) %>% 
  ggplot(aes(x = gdpPercap,
             y = lifeExp)) +
  geom_point()

# let's add a scale and theme
gapminder <- gapminder

gapminder %>% 
  filter(year == 2007) %>% 
  ggplot(aes(x = gdpPercap,
             y = lifeExp)) +
  geom_point() +
  scale_x_log10() +
  theme_minimal() 
```

## Changes in GitHub Desktop

![](github_desktop_changes.jpg)

## Commits on GitHub

![](commits.jpg)

## Pushing changes

-   When you made the commits, we can “push” these changes to GitHub

    -   (If necessary) publish the repository (top-right corner of GitHub Desktop)

    -   Press the same button (“Push origin”)

    -   Go to github.com, log into your account and look for the repository. Can you see the repository and the changes?

## Push changes in GitHub Desktop

![](github_desktop_changes2.jpg)

## Our progress so far:

![](workflow.jpg)

## Branches

-   So far, we only used the main branch. But you can commit, push, and pull to more than one branch

-   A branch is an independent line of development within a repo, where the intent is usually to merge it into the main branch when ready.

-   You can make edits in a separate branch and test what works. When you are happy with the changes, you can commit to this branch.

-   Make sure you are in the desired branch when working on your project!

## Pull requests

-   A pull request is a GitHub-specific way to propose changes to a repo that overlays Git’s regular branch and merge workflow with facilities for structured review.

-    A pull request can be made between two branches in the same repo, such as main

-   Especially useful/necessary in collaborative projects

-   Also useful if you experiment and change code in your personal project

## Branches and pull requests

![](images/clipboard-3908297671.png)

## Live coding

1.  how to create a new branch

2.  how to make changes in this branch

3.  how to publish the branch

4.  how to make a pull request

5.  how to merge a pull request

## Conflicts

-   Conflicts occur when there are competing line changes in two branches

-   Common in collaborative projects

-   Requires time and effort but makes sure that everyone involved knows what has been changed

-   How to handle conflicts is beyond the scope of today's session but see: [resolving a merge conflict on GitHub](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/addressing-merge-conflicts/resolving-a-merge-conflict-on-github)

## Take aways

-   Version control is important & can be motivating and rewarding

-   Reproducible research is key and required for most journals

-   Allows you to go “back in time” and spot changes and errors

-   Prepares you for collaborative projects and software development

**→ Knowing about version control is a very useful skill!**

# Exercises

## Exercise 1

**GitHub Desktop: Setting up a new repository:**

1.   File → New Repository

2.  Add name, select location, (optionally) add gitignore

3.  Use “Publish Repository” button to host repository on GitHub

## Exercise 2

**Committing changes:**

1.  Create a file (e.g., .txt, .tex, .R, .py, .do) of your choice and save it in your repo

2.  Add some content to the file and save it

3.  Observe whether this change is indicated in the repo at GitHub Desktop. If that’s the case, write a commit message and press the “commit” button

4.  Make a few more changes to the file, inspect the changes in GitHub, and make a second commit

## Exercise 3

**Pushing changes:**

1\. (If necessary) publish the repository (top-right corner of GitHub Desktop)

2\. Press the same button (“Push origin”)

3\. Go to github.com, log into your account and look for the repository. Do you see the repo and the changes?

## Bonus

**Branches and pull requests:**

1.  Create and publish a new branch

2.  Commit changes to the branch

3.  Make and merge a pull request
