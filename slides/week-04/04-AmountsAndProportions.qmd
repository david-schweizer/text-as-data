---
title: "Tidyverse II: Import, tidy, and transform"
subtitle: "Week 4"
author: "David Schweizer"
date: "March 05, 2023"
date-format: long
institute: "University of Mannheim"
format: 
  revealjs:
    theme: simple
    slide-number: c/t #< collapsed/total
    footer: "Automated Data Collection | Spring 2024 | University of Mannheim"
editor: visual
---

```{r packages, include=FALSE}
pacman::p_load(
  "tidyverse"
)
```

## Plan for today

Organizational:

-   assignments

Last week:

-   import, select, filter, and mutate data

Today:

-   reshape, group & summarize, join, and save data

## Organizational

-   First assignment and only assignment before the Easter break next week: **12.03.2024 after our session, until 19.03.24 15:00.** Submission via ILIAS.
-   Remaining assignments will be determined before the Easter break but might still change!

## Our workflow so far...

::: panel-tabset
## Import

```{r, echo=TRUE}
# 2021 German federal election data (.csv)

election <- readr::read_delim("w-btw21_kerg2.csv", 
                       delim = ";", 
                       escape_double = FALSE, 
                       locale = locale(decimal_mark = ","), 
                       trim_ws = TRUE, 
                       skip = 9)

str(election) # and/or dim(), head(), names(), ...
```

## Select & Rename

```{r, echo=TRUE}
election <- election %>% 
  dplyr::select(area_no = Gebietsnummer,
                area_type = Gebietsart,
                area_name = Gebietsname,
                group_type = Gruppenart,
                group_name = Gruppenname,
                vote = Stimme,
                vote_share = Prozent)

names(election)
```

## Filter

```{r, echo=TRUE}
# keep vote shares of the AfD on the district level
afd <- election %>% 
  filter(area_type == "Wahlkreis") %>% 
  filter(group_name == "AfD")

# we can achieve the same in one line
afd <- election %>% 
  filter(area_type == "Wahlkreis" & group_name == "AfD")
```

## Mutate

```{r, echo=TRUE}
# calculate the difference between the first and second vote
afd_diff <- afd %>%
  pivot_wider(names_from = "vote", 
              values_from = "vote_share") %>% 
  mutate(diff = `1` - `2`) %>% 
  pivot_longer(cols = !c(area_no:group_name), 
               names_to = "vote", 
               values_to = "vote_share")
```

## 
:::

## Exkurs: Reshape data

::: panel-tabset
## Overview

[![](Screenshot%202024-03-05%20114951.jpg){width="855"}](https://tavareshugo.github.io/r-intro-tidyverse-gapminder/09-reshaping/index.html)

## To wide

```{r, include=F}
library(gapminder)

gapminder_example <- gapminder %>% 
  select(country, year, gdpPercap) %>% 
  filter(country %in% c("Germany", "France", "United Kingdom")) %>%
  filter(year %in% c(2007, 2002, 1997))
```

```{r, echo=TRUE}
head(gapminder_example)

gapminder_wide <- gapminder_example %>% 
  pivot_wider(names_from = year,
              names_prefix = "year_",
              values_from = gdpPercap)
```

## To long

```{r, echo=TRUE}
head(gapminder_wide)

gapminder_long <- gapminder_wide %>% 
  pivot_longer(cols = year_1997:year_2007,
               names_to = "year",
               names_prefix = "_year",
               values_to = "gdpPercap")
```

## Compared

```{r, echo=TRUE}
head(gapminder_long)

head(gapminder_wide)
```
:::

## Next: Group & summarize

So far:

-   We can generate new variables using *mutate()* keeping the structure of the data the same

With *summarize():*

-   we change the structure of our data frame;

-   any computations using *summarize()* collapses rows to summary statistics (e.g., mean, standard deviation);

-   and removes all variables irrelevant for computing the summary statistics.

## Example: Summary statistics - mutate()

```{r, echo=TRUE}
afd_mean <- afd %>% 
  filter(vote == 2) %>% 
  mutate(mean = mean(vote_share))

dim(afd)
dim(afd_mean)
```

## Summarize()

```{r, echo=TRUE}
afd_mean <- afd %>% 
  filter(vote == 2) %>% 
  summarize(mean = mean(vote_share)) # option: "na.rm = TRUE"

afd_mean
```

## Summarize()

```{r, echo=TRUE}
afd_statistics <- afd %>% 
  filter(vote == 2) %>% 
  summarize(mean = mean(vote_share),      # option: "na.rm = TRUE"
            median = median(vote_share),
            minimum = min(vote_share),
            maximum = max(vote_share),
            sd = sd(vote_share)) 

afd_statistics
```

## Group and summarize

We can use *group_by()* to calculate summary statistics for different groups:

```{r, echo=TRUE}
statistics_group <- election %>% 
  filter(area_type == "Wahlkreis") %>% 
  filter(vote == 2) %>% 
  filter(group_name %in% c("SPD", "CDU")) %>% 
  group_by(group_name) %>%  # do not forget to ungroup()
  summarize(mean = mean(vote_share,
                        na.rm = TRUE))

statistics_group
```

## Join data

In applied research, we oftentimes need to combine multiple data sets (e.g., multiple survey waves, election statistics, ...).

-   We can use *bind_cols()* if two (or more) data frames have different variables (columns) but same cases (rows).

-   We can use *bind_rows()* if two (or more) data frames have the same variables (columns) but different cases (rows).

We can also use *join* operators from the dplyr package. These allow us to combine data frames based on a (shared) *key*.

## Binding columns

::: panel-tabset
## Data 1

```{r, echo=TRUE}
# Let's use our gapminder_example data
head(gapminder_example)

```

## Data 2

```{r, echo=TRUE}
# and add this dataframe
random <- data.frame(r1 = c(1:9))

random
```

## bind_cols

```{r, echo=TRUE}
# now we can just join these two dataframes
new <- bind_cols(gapminder_example, random)

new
```
:::

## Binding rows

::: panel-tabset
## Data 1

```{r, echo = TRUE}
# Let's use our gapminder_example data
head(gapminder_example)

```

## Data 2

```{r, echo=TRUE}
# and add this dataframe
more_info <- data.frame(country = "Austria",
                        year = 2007,
                        gdpPercap = NA)

more_info
```

## bind_rows

```{r, echo=TRUE}
# now we can just join these two dataframes
gapminder_added <- bind_rows(gapminder_example, more_info)

gapminder_added
```
:::

## Join data frames: left_join()

Other joins: <https://github.com/gadenbuie/tidyexplain>

[![](left-join.gif)](https://github.com/gadenbuie/tidyexplain)

## Example: left_join()

::: panel-tabset
## Election

```{r, echo=TRUE}
election <- readr::read_delim("w-btw21_kerg2.csv", 
                       delim = ";", escape_double = FALSE, 
                       locale = locale(decimal_mark = ","), 
                       trim_ws = TRUE, skip = 9) %>% 
  dplyr::select(area_no = Gebietsnummer,
                area_type = Gebietsart,
                area_name = Gebietsname,
                group_type = Gruppenart,
                group_name = Gruppenname,
                vote = Stimme,
                vote_share = Prozent) %>% 
  filter(area_type == "Wahlkreis" & group_name == "AfD" & vote == 2)
```

## Structural

```{r, echo=TRUE}
structural <- readr::read_delim("btw21_strukturdaten.csv", 
                                delim = ";", escape_double = FALSE,
                                locale = locale(decimal_mark = ","),
                                trim_ws = TRUE, skip = 8) %>% 
  dplyr::select(area_no = `Wahlkreis-Nr.`,
                unemployment_rate = `Arbeitslosenquote Februar 2021 - insgesamt`) %>% 
  filter(area_no <= 299)
```

## Join

```{r, echo=TRUE}
election_structural <- election %>% 
  left_join(structural, by = "area_no") %>% 
  select(area_no, area_name, vote_share, unemployment_rate)

head(election_structural)
```
:::

## Save your data

We can easily save our data frame:

```{r, echo=TRUE, eval=FALSE}
save(election_structural,
     file="election_structural.Rda")
```

And load it again:

```{r, echo=TRUE, eval=FALSE}
# make sure that you are in the right working directory!
# Session -> Set working directory
load("election_structural.Rda")
```

# Your turn!
